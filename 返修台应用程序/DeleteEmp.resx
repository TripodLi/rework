<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        H//wAA///4AP//+AB///gAP//8AB///AAf//4AD//+AI///wDH//8Bx///g+f//4f///8D////Af///w
        H///8B8///Af///wP///+D////////////8=
</value>
  </data>
</root>